if (!is.character(group.by) || length(group.by) != 1 || !group.by %in% colnames(sce@meta.data)) {
stop("参数 'group.by' 必须为单一字符，且存在于元数据中！", call. = FALSE)
}
# 验证 split.by 是否为字符且存在于元数据中
if (!is.character(split.by) || length(split.by) != 1 || !split.by %in% colnames(sce@meta.data)) {
stop("参数 'split.by' 必须为单一字符，且存在于元数据中！", call. = FALSE)
}
# 确保输出目录存在
figures_dir <- file.path(output_dir, "figures")
dir.create(figures_dir, recursive = TRUE, showWarnings = FALSE)
# 加载必要的包
library(Seurat)
library(patchwork)
# 检测 group.by 和 split.by 是否为连续变量，并分段
group_var <- group.by
split_var <- split.by
# 检查 group.by 是否为连续变量（数值型）
if (is.numeric(sce@meta.data[[group.by]])) {
quartiles <- quantile(sce@meta.data[[group.by]], probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
sce@meta.data[[paste0(group.by, "_binned")]] <- cut(sce@meta.data[[group.by]],
breaks = quartiles,
labels = c("Q1", "Q2", "Q3", "Q4"),
include.lowest = TRUE)
group_var <- paste0(group.by, "_binned")
}
# 检查 split.by 是否为连续变量（数值型）
if (is.numeric(sce@meta.data[[split.by]]) && !split.by %in% names(sce@meta.data)) {
quartiles <- quantile(sce@meta.data[[split.by]], probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
sce@meta.data[[paste0(split.by, "_binned")]] <- cut(sce@meta.data[[split.by]],
breaks = quartiles,
labels = c("Q1", "Q2", "Q3", "Q4"),
include.lowest = TRUE)
split_var <- paste0(split.by, "_binned")
}
# 第一行：按 sample 和 group.by 分组
p1 <- DimPlot(sce,
reduction = reduction,
group.by = "sample",
label = FALSE) +
labs(title = "PCA by Sample")
p2 <- DimPlot(sce,
reduction = reduction,
group.by = group_var,
label = FALSE) +
labs(title = paste0("PCA by ", group.by))
# 第二行：按 group.by 分组，按 split.by 分面
p3 <- DimPlot(sce,
reduction = reduction,
group.by = group_var,
split.by = split_var,
label = FALSE) +
labs(title = paste0("PCA by ", group.by, ", Split by ", split.by))
# 组合图表（2 行布局）
combined_plot <- (p1 | p2) / p3 + plot_layout(heights = c(1, 1))
# 动态生成文件名
filename <- paste0("preliminary_pca_", group.by, ".png")
# 保存组合图
ggsave(file.path(figures_dir, filename),
plot = combined_plot,
width = width,
height = height,
dpi = 300)  # 设置 DPI 为 300
}
#-------------------------------------------------------------------------------
# 导入 PCA 可视化模块
source("Rutils/pre_visualize_pca.R")
# 可视化 PCA 结果
# 第一组图：细胞周期相关
# - 第一行：按 sample 和 Phase 分组
# - 第二行：按 Phase 分组，按 Phase 分面
# - 保存为 output_dir/figures/preliminary_pca_Phase.png
message("可视化 PCA 结果（细胞周期相关）...")
pre_visualize_pca(sce,
output_dir = output_dir,
reduction = "pca",
group.by = "Phase",
split.by = "Phase",
width = 10,
height = 10)
# 第二组图：线粒体比例相关
# - 第一行：按 sample 和 percent_mito 分组
# - 第二行：按 percent_mito 分组，按 percent_mito 分面
# - 保存为 output_dir/figures/preliminary_pca_percent_mito.png
message("可视化 PCA 结果（线粒体比例相关）...")
pre_visualize_pca(sce,
output_dir = output_dir,
reduction = "pca",
group.by = "percent_mito",
split.by = "percent_mito",
width = 10,
height = 10)
reduction = "pca"
group.by = "percent_mito",
group.by = "percent_mito"
split.by = "percent_mito"
quartiles <- quantile(sce@meta.data[[group.by]], probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
sce@meta.data[[paste0(group.by, "_binned")]] <- cut(sce@meta.data[[group.by]],
breaks = quartiles,
labels = c("Q1", "Q2", "Q3", "Q4"),
include.lowest = TRUE)
group_var <- paste0(group.by, "_binned")
DimPlot(sce,
reduction = reduction,
group.by = group_var,
label = FALSE) +
labs(title = paste0("PCA by ", group.by))
DimPlot(sce,
reduction = reduction,
group.by = group_var,
split.by = split_var,
label = FALSE) +
labs(title = paste0("PCA by ", group.by, ", Split by ", split.by))
quartiles <- quantile(sce@meta.data[[split.by]], probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
sce@meta.data[[paste0(split.by, "_binned")]] <- cut(sce@meta.data[[split.by]],
breaks = quartiles,
labels = c("Q1", "Q2", "Q3", "Q4"),
include.lowest = TRUE)
split_var <- paste0(split.by, "_binned")
DimPlot(sce,
reduction = reduction,
group.by = group_var,
split.by = split_var,
label = FALSE) +
labs(title = paste0("PCA by ", group.by, ", Split by ", split.by))
DimPlot(sce,
reduction = reduction,
group.by = "sample",
label = FALSE) +
labs(title = "PCA by Sample")
# 组合图表（2 行布局）
combined_plot <- (p1 | p2) / p3 + plot_layout(heights = c(1, 1))
# 第一行：按 sample 和 group.by 分组
p1 <- DimPlot(sce,
reduction = reduction,
group.by = "sample",
label = FALSE) +
labs(title = "PCA by Sample")
p2 <- DimPlot(sce,
reduction = reduction,
group.by = group_var,
label = FALSE) +
labs(title = paste0("PCA by ", group.by))
# 第二行：按 group.by 分组，按 split.by 分面
p3 <- DimPlot(sce,
reduction = reduction,
group.by = group_var,
split.by = split_var,
label = FALSE) +
labs(title = paste0("PCA by ", group.by, ", Split by ", split.by))
# 组合图表（2 行布局）
combined_plot <- (p1 | p2) / p3 + plot_layout(heights = c(1, 1))
combined_plot
# 动态生成文件名
filename <- paste0("preliminary_pca_", group.by, ".png")
# 保存组合图
ggsave(file.path(figures_dir, filename),
plot = combined_plot,
width = width,
height = height,
dpi = 300)  # 设置 DPI 为 300
# 确保输出目录存在
figures_dir <- file.path(output_dir, "figures")
# 保存组合图
ggsave(file.path(figures_dir, filename),
plot = combined_plot,
width = width,
height = height,
dpi = 300)  # 设置 DPI 为 300
width = 10
height = 10
# 保存组合图
ggsave(file.path(figures_dir, filename),
plot = combined_plot,
width = width,
height = height,
dpi = 300)  # 设置 DPI 为 300
# Rutils/pre_visualize_pca.R
#-------------------------------------------------------------------------------
# scFlowKit: Visualize PCA Results for Single-Cell RNA-seq Data
#-------------------------------------------------------------------------------
# pre_visualize_pca: 可视化 PCA 结果
# 参数:
#   sce: Seurat 对象，包含 PCA 降维结果
#   output_dir: 输出目录，用于保存 PCA 图
#   reduction: 降维方法，默认 "pca"
#   group.by: 分组变量，字符形式，例如 "sample", "Phase", "percent_mito"
#   split.by: 分面变量，字符形式，例如 "sample", "Phase", "percent_mito"
#   width: 保存图片的宽度，默认 10
#   height: 保存图片的高度，默认 10
pre_visualize_pca <- function(sce,
output_dir,
reduction = "pca",
group.by = "sample",
split.by = "sample",
width = 10,
height = 10) {
# 验证输入参数是否为 Seurat 对象
if (!inherits(sce, "Seurat")) {
stop("参数 'sce' 必须为 Seurat 对象！", call. = FALSE)
}
# 验证 output_dir 是否为字符类型
if (!is.character(output_dir)) {
stop("参数 'output_dir' 必须为字符类型！", call. = FALSE)
}
# 验证 group.by 是否为字符且存在于元数据中
if (!is.character(group.by) || length(group.by) != 1 || !group.by %in% colnames(sce@meta.data)) {
stop("参数 'group.by' 必须为单一字符，且存在于元数据中！", call. = FALSE)
}
# 验证 split.by 是否为字符且存在于元数据中
if (!is.character(split.by) || length(split.by) != 1 || !split.by %in% colnames(sce@meta.data)) {
stop("参数 'split.by' 必须为单一字符，且存在于元数据中！", call. = FALSE)
}
# 确保输出目录存在
figures_dir <- file.path(output_dir, "figures")
dir.create(figures_dir, recursive = TRUE, showWarnings = FALSE)
# 加载必要的包
library(Seurat)
library(patchwork)
# 检测 group.by 和 split.by 是否为连续变量，并分段
group_var <- group.by
split_var <- split.by
# 检查 group.by 是否为连续变量（数值型）
if (is.numeric(sce@meta.data[[group.by]])) {
quartiles <- quantile(sce@meta.data[[group.by]], probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
sce@meta.data[[paste0(group.by, "_binned")]] <- cut(sce@meta.data[[group.by]],
breaks = quartiles,
labels = c("Q1", "Q2", "Q3", "Q4"),
include.lowest = TRUE)
group_var <- paste0(group.by, "_binned")
}
# 检查 split.by 是否为连续变量（数值型）
if (is.numeric(sce@meta.data[[split.by]]) && !split.by %in% names(sce@meta.data)) {
quartiles <- quantile(sce@meta.data[[split.by]], probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
sce@meta.data[[paste0(split.by, "_binned")]] <- cut(sce@meta.data[[split.by]],
breaks = quartiles,
labels = c("Q1", "Q2", "Q3", "Q4"),
include.lowest = TRUE)
split_var <- paste0(split.by, "_binned")
}
# 第一行：按 sample 和 group.by 分组
p1 <- DimPlot(sce,
reduction = reduction,
group.by = "sample",
label = FALSE) +
labs(title = "PCA by Sample")
p2 <- DimPlot(sce,
reduction = reduction,
group.by = group_var,
label = FALSE) +
labs(title = paste0("PCA by ", group.by))
# 第二行：按 group.by 分组，按 split.by 分面
p3 <- DimPlot(sce,
reduction = reduction,
group.by = group_var,
split.by = split_var,
label = FALSE) +
labs(title = paste0("PCA by ", group.by, ", Split by ", split.by))
# 组合图表（2 行布局）
combined_plot <- (p1 | p2) / p3 + plot_layout(heights = c(1, 1))
# 动态生成文件名
filename <- paste0("preliminary_pca_", group.by, ".png")
# 保存组合图
ggsave(file.path(figures_dir, filename),
plot = combined_plot,
width = width,
height = height,
dpi = 300)  # 设置 DPI 为 300
}
#-------------------------------------------------------------------------------
# 第二组图：线粒体比例相关
# - 第一行：按 sample 和 percent_mito 分组
# - 第二行：按 percent_mito 分组，按 percent_mito 分面
# - 保存为 output_dir/figures/preliminary_pca_percent_mito.png
# - 注意：此部分绘图时间较长（可能由于细胞数量多或分面过多），已注释掉
# message("可视化 PCA 结果（线粒体比例相关）...")
pre_visualize_pca(sce,
output_dir = output_dir,
reduction = "pca",
group.by = "percent_mito",
split.by = "percent_mito",
width = 10,
height = 10)
sce@meta.data[[split.by]]
# Rutils/pre_visualize_pca.R
#-------------------------------------------------------------------------------
# scFlowKit: Visualize PCA Results for Single-Cell RNA-seq Data
#-------------------------------------------------------------------------------
# pre_visualize_pca: 可视化 PCA 结果
# 参数:
#   sce: Seurat 对象，包含 PCA 降维结果
#   output_dir: 输出目录，用于保存 PCA 图
#   reduction: 降维方法，默认 "pca"
#   group.by: 分组变量，字符形式，例如 "sample", "Phase", "percent_mito"
#   split.by: 分面变量，字符形式，例如 "sample", "Phase", "percent_mito"
#   width: 保存图片的宽度，默认 10
#   height: 保存图片的高度，默认 10
pre_visualize_pca <- function(sce,
output_dir,
reduction = "pca",
group.by = "sample",
split.by = "sample",
width = 10,
height = 10) {
# 验证输入参数是否为 Seurat 对象
if (!inherits(sce, "Seurat")) {
stop("参数 'sce' 必须为 Seurat 对象！", call. = FALSE)
}
# 验证 output_dir 是否为字符类型
if (!is.character(output_dir)) {
stop("参数 'output_dir' 必须为字符类型！", call. = FALSE)
}
# 验证 group.by 是否为字符且存在于元数据中
if (!is.character(group.by) || length(group.by) != 1 || !group.by %in% colnames(sce@meta.data)) {
stop("参数 'group.by' 必须为单一字符，且存在于元数据中！", call. = FALSE)
}
# 验证 split.by 是否为字符且存在于元数据中
if (!is.character(split.by) || length(split.by) != 1 || !split.by %in% colnames(sce@meta.data)) {
stop("参数 'split.by' 必须为单一字符，且存在于元数据中！", call. = FALSE)
}
# 确保输出目录存在
figures_dir <- file.path(output_dir, "figures")
dir.create(figures_dir, recursive = TRUE, showWarnings = FALSE)
# 加载必要的包
library(Seurat)
library(patchwork)
# 检测 group.by 和 split.by 是否为连续变量，并分段
group_var <- group.by
split_var <- split.by
# 检查 group.by 是否为连续变量（只检查前 3 个值）
if (is.numeric(head(sce@meta.data[[group.by]], 3))) {
quartiles <- quantile(sce@meta.data[[group.by]], probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
sce@meta.data[[paste0(group.by, "_binned")]] <- cut(sce@meta.data[[group.by]],
breaks = quartiles,
labels = c("Q1", "Q2", "Q3", "Q4"),
include.lowest = TRUE)
group_var <- paste0(group.by, "_binned")
}
# 检查 split.by 是否为连续变量（只检查前 3 个值，且避免重复分段）
if (is.numeric(head(sce@meta.data[[split.by]], 3)) && !split.by %in% names(sce@meta.data)) {
quartiles <- quantile(sce@meta.data[[split.by]], probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
sce@meta.data[[paste0(split.by, "_binned")]] <- cut(sce@meta.data[[split.by]],
breaks = quartiles,
labels = c("Q1", "Q2", "Q3", "Q4"),
include.lowest = TRUE)
split_var <- paste0(split.by, "_binned")
}
# 第一行：按 sample 分组
p1 <- DimPlot(sce,
reduction = reduction,
group.by = "sample",
label = FALSE) +
labs(title = "PCA by Sample")
# 第一行：按 group.by 分组
p2 <- DimPlot(sce,
reduction = reduction,
group.by = group_var,
label = FALSE) +
labs(title = paste0("PCA by ", group.by))
# 第二行：按 group.by 分组，按 split.by 分面
p3 <- DimPlot(sce,
reduction = reduction,
group.by = group_var,
split.by = split_var,
label = FALSE) +
labs(title = paste0("PCA by ", group.by, ", Split by ", split.by))
# 使用 patchwork 组合图表（2 行布局）
combined_plot <- (p1 | p2) / p3 + plot_layout(heights = c(1, 1))
# 动态生成文件名
filename <- paste0("preliminary_pca_", group.by, ".png")
# 保存组合图
ggsave(file.path(figures_dir, filename),
plot = combined_plot,
width = width,
height = height,
dpi = 300)
}
#-------------------------------------------------------------------------------
# 第二组图：线粒体比例相关
# - 第一行：按 sample 和 percent_mito 分组
# - 第二行：按 percent_mito 分组，按 percent_mito 分面
# - 保存为 output_dir/figures/preliminary_pca_percent_mito.png
# - 注意：此部分绘图时间较长（可能由于细胞数量多或分面过多），已注释掉
# message("可视化 PCA 结果（线粒体比例相关）...")
pre_visualize_pca(sce,
output_dir = output_dir,
reduction = "pca",
group.by = "percent_mito",
split.by = "percent_mito",
width = 10,
height = 10)
# Rutils/pre_visualize_pca.R
#-------------------------------------------------------------------------------
# scFlowKit: Visualize PCA Results for Single-Cell RNA-seq Data
#-------------------------------------------------------------------------------
# pre_visualize_pca: 可视化 PCA 结果
# 参数:
#   sce: Seurat 对象，包含 PCA 降维结果
#   output_dir: 输出目录，用于保存 PCA 图
#   reduction: 降维方法，默认 "pca"
#   group.by: 分组变量，字符形式，例如 "sample", "Phase", "percent_mito"
#   split.by: 分面变量，字符形式，例如 "sample", "Phase", "percent_mito"
#   width: 保存图片的宽度，默认 10
#   height: 保存图片的高度，默认 10
pre_visualize_pca <- function(sce,
output_dir,
reduction = "pca",
group.by = "sample",
split.by = "sample",
width = 10,
height = 10) {
# 验证输入参数是否为 Seurat 对象
if (!inherits(sce, "Seurat")) {
stop("参数 'sce' 必须为 Seurat 对象！", call. = FALSE)
}
# 验证 output_dir 是否为字符类型
if (!is.character(output_dir)) {
stop("参数 'output_dir' 必须为字符类型！", call. = FALSE)
}
# 验证 group.by 是否为字符且存在于元数据中
if (!is.character(group.by) || length(group.by) != 1 || !group.by %in% colnames(sce@meta.data)) {
stop("参数 'group.by' 必须为单一字符，且存在于元数据中！", call. = FALSE)
}
# 验证 split.by 是否为字符且存在于元数据中
if (!is.character(split.by) || length(split.by) != 1 || !split.by %in% colnames(sce@meta.data)) {
stop("参数 'split.by' 必须为单一字符，且存在于元数据中！", call. = FALSE)
}
# 确保输出目录存在
figures_dir <- file.path(output_dir, "figures")
dir.create(figures_dir, recursive = TRUE, showWarnings = FALSE)
# 加载必要的包
library(Seurat)
library(patchwork)
# 检测 group.by 和 split.by 是否为连续变量，并分段
group_var <- group.by
split_var <- split.by
# # 检查 group.by 是否为连续变量（只检查前 3 个值）
# if (is.numeric(head(sce@meta.data[[group.by]], 3))) {
#   quartiles <- quantile(sce@meta.data[[group.by]], probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
#   sce@meta.data[[paste0(group.by, "_binned")]] <- cut(sce@meta.data[[group.by]],
#                                                       breaks = quartiles,
#                                                       labels = c("Q1", "Q2", "Q3", "Q4"),
#                                                       include.lowest = TRUE)
#   group_var <- paste0(group.by, "_binned")
# }
#
# # 检查 split.by 是否为连续变量（只检查前 3 个值，且避免重复分段）
# if (is.numeric(head(sce@meta.data[[split.by]], 3)) && !split.by %in% names(sce@meta.data)) {
#   quartiles <- quantile(sce@meta.data[[split.by]], probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
#   sce@meta.data[[paste0(split.by, "_binned")]] <- cut(sce@meta.data[[split.by]],
#                                                       breaks = quartiles,
#                                                       labels = c("Q1", "Q2", "Q3", "Q4"),
#                                                       include.lowest = TRUE)
#   split_var <- paste0(split.by, "_binned")
# }
# 第一行：按 sample 分组
p1 <- DimPlot(sce,
reduction = reduction,
group.by = "sample",
label = FALSE) +
labs(title = "PCA by Sample")
# 第一行：按 group.by 分组
p2 <- DimPlot(sce,
reduction = reduction,
group.by = group_var,
label = FALSE) +
labs(title = paste0("PCA by ", group.by))
# 第二行：按 group.by 分组，按 split.by 分面
p3 <- DimPlot(sce,
reduction = reduction,
group.by = group_var,
split.by = split_var,
label = FALSE) +
labs(title = paste0("PCA by ", group.by, ", Split by ", split.by))
# 使用 patchwork 组合图表（2 行布局）
combined_plot <- (p1 | p2) / p3 + plot_layout(heights = c(1, 1))
# 动态生成文件名
filename <- paste0("preliminary_pca_", group.by, ".png")
# 保存组合图
ggsave(file.path(figures_dir, filename),
plot = combined_plot,
width = width,
height = height,
dpi = 300)
}
#-------------------------------------------------------------------------------
# 第二组图：线粒体比例相关
# - 第一行：按 sample 和 percent_mito 分组
# - 第二行：按 percent_mito 分组，按 percent_mito 分面
# - 保存为 output_dir/figures/preliminary_pca_percent_mito.png
# - 注意：此部分绘图时间较长（可能由于细胞数量多或分面过多），已注释掉
# message("可视化 PCA 结果（线粒体比例相关）...")
pre_visualize_pca(sce,
output_dir = output_dir,
reduction = "pca",
group.by = "percent_mito",
split.by = "percent_mito",
width = 10,
height = 10)
is.numeric(head(sce@meta.data[[group.by]], 3))
# 第二组图：线粒体比例相关
# - 第一行：按 sample 和 percent_mito 分组
# - 第二行：按 percent_mito 分组，按 percent_mito 分面
# - 保存为 output_dir/figures/preliminary_pca_percent_mito.png
# - 注意：此部分绘图时间较长（可能由于细胞数量多或分面过多），已注释掉
# message("可视化 PCA 结果（线粒体比例相关）...")
pre_visualize_pca(sce,
output_dir = output_dir,
reduction = "pca",
group.by = "percent_mito",
split.by = "percent_mito",
width = 10,
height = 10)
